class Solution {
    private static void rev( int arr[],int low,int high)
    {
        int i=low,j=high;
        while( i<j)
        {
            int temp=arr[i];
            arr[i]=arr[j];
            arr[j]=temp;
            i++;j--;
        }
    }
    public void nextPermutation(int[] A) {
        
         int n =  A.length; // size of the array.

    // Step 1: Find the break point:
    int ind = -1; // break point
    for (int i = n - 2; i >= 0; i--) {
        if (A[i] < A[i + 1]) {
            // index i is the break point
            ind = i;
            break;
        }
    }

    // If break point does not exist:
    if (ind == -1) {
        // reverse the whole array:
        rev( A,0,n-1);
        return ;
    }

    // Step 2: Find the next greater element
    //         and swap it with arr[ind]:

    for (int i = n - 1; i > ind; i--) {
        if (A[i] > A[ind]) {

            int tt=A[i];
            A[i]=A[ind];
            A[ind]=tt;

            break;
        }
    }

    // Step 3: reverse the right half:
    rev(A, ind+1,n-1);

    return ;

    }
}
